#+TITLE: Livre blanc : Plateforme applicative partagée KonSept (K7)

* <========== START ==========> 
* Introduction
KonSept c'est une plateforme de développement Web constitué de
- Un langage de programmation basé sur le lambda-calculus
- Un gestionnaire de base de données multi-modèles
- Un runtime, compilateur et interpréteur pour WebAssembly
- Un gestionnaire de paquets

KonSept c'est également une suite d'applications de
- Rédaction de documents
- Développement
- De calculs et simulations
- Design thinking

KonSept ce n'est pas une plateforme multimédia ni un navigateur internet. Ce n'est pas non plus un conteneur d'applications ni un système d'exploitation.

Le développement, l'amélioration et l'organisation communautaire de KonSept s'organise sur la plateforme collaborative konsept.dev

* Plateforme de développement
** Langage de programmation
*** Programming paradigme
**** Data-flow
Post processing : Envois les données au client une fois que la base de données les a sauvegardées
#+begin_src plantuml :file drawings/dataflow-postprocessing.svg :cmdline -tsvg
@startuml
Queue -> DB : Transaction
DB -> DB : Processing
DB --> Queue : OK
Queue -> Queue : Clear
DB -> Client : Push data
@enduml
#+end_src

#+RESULTS:
[[file:drawings/dataflow-postprocessing.svg]]

Préprocessing : Envois des données aux clients dès qu'elles arrivent.
#+begin_src plantuml :file drawings/dataflow-preprocessing.svg :cmdline -tsvg
@startuml
Queue -> DB : Transaction
Queue -> Client : Push data
DB -> DB : Processing
DB --> Queue : OK
Client --> Queue : OK
Queue -> Queue : Clear
@enduml
#+end_src

#+RESULTS:
[[file:drawings/dataflow-preprocessing.svg]]

**** Event-driven
S'il ne se passe rien alors ne fait rien.
Scheduled tasks :

#+begin_src: elisp
(defun count)
(count new-entry)
(@count 10 block) ;; at + event + rule  = action 
#+end_src

**** Agent based
**** Stack based
**** Bloc oriented
**** Transactionnel
**** Batteries included
Pas de langages d'extensions, pas d'ORM, pas d'applications "in the middle".
KonSept est autoporteur :
- Building :: Macroprogrammation, business logic, IHM, etc.
- Querying :: Echanges avec les bases de données (SQL, Spark, GraphQL, etc.)
- Operate :: Command line interface, package management, automatisation, administration...

** Runtime
Inspiration de [[https://starpu.gitlabpages.inria.fr/][StarPU]] : optimisation du calcul parallele sur des macines hétérogènes
Subroutines Token-threaded

** Base de données
- Row, Column, Graph, Vector, Geospacial, Document, RDF, Objet...
- Temporaire en cache L3, en mémoire RAM
- Partagée, distribuée, répliquée et décentralisée
- Persistente en stockage physique
- Une base de configuration par utilisateur et une base d'ensemble
- Mise à l'échelle automatique et sans maintenance (network discovery, hardware discovery)
- Basée sur la pile (stack) et optimisation du (heap)

*LambdaLite*

Le système de gestion de base de donnée administre l'intégralité des informations et fichiers stockés par l'utilisateur.

** Ligne de commande
*Lish* signifie LIsp SHell

Il s'agit d'une interface système basée sur la synthaxe Common-Lisp permettant d'éxecuter des fonctions d'administrations. Cette interface peut être appelée n'importe ou dans le système, y compris depuis le code source d'une application. Cela permet un développement plus étroit des modules avec le système.

Cette interface fonctionne nativement avec le reste des composants du système. Il constitue notamment l'orchestrateur de la base de donnée.

Inspirations : Bash, Linux cmd, Git, Guix, SQL, Nu shell, etc.

Le système d'exploitation utilise son propre langage d'administration. Il s'agit de *Lish* :
- *L* ish *i* s a *sh* el
- *L* isp *i* n a *sh* el

Lish est une utilisation en invite de commande de Common Lisp.

Sa synthaxe est excessivement simple et explicite :
#+begin_src lisp
(fonction :propriété valeurs)
#+end_src

La requette suivante :
#+begin_src bash
find / -type f -name "*.mp3"
#+end_src

Devient :
#+begin_src lisp
(list :file-type mp3)
#+end_src

Nous remarquons la proximité avec une requette SQL qui pourrait être :
#+begin_src sql
    SELECT * FROM root WHERE mime_type = 'audio/mpeg';
#+end_src

La synthaxe de Lish se veut claire et explicite. L'avantage d'être basée sur Common Lisp est que cela offre la capacité de réaliser des requettes complexe en tirant avantage des s-expressions.


Voici à quoi ressemble une session shell avec *lish* :
#+begin_src common-lisp
;; prompt
username@domain[target][branch]: lambda (list :filetype mp3)]

;; run
(list (branch (target (domain nom-domain) nom-target) nom-branch)
      :filetype mp3)

;; return
| file | size   | date      | etc.   |
|------+--------+-----------+--------|
| a    | xxx ko | timestamp | ...    |
| b    | yyy ko | timestamp | ...    |
| c    | zzz ko | timestamp | ...    |

;; exemple d'erreur
echo : no such file type on target

#+end_src

*** Benchmark
**** Borg
**** Hex

* Suite d'application
* Plateforme collaborative
** Token economie (K7C)
- Default token à "miner" en réalisant les formations KonSept
- Creation token obtenu lors du développement plannifié, de l'amélioration, optimisation ou sécurisation d'une cassette
- Utilisation des K7C (KonSept Coin) pour déployer ou consommer des services sur le réseau distribué

#+begin_src plantuml
@startuml
  
@enduml
#+end_src
* <=========== END ===========>
